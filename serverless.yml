service: truckload-admin-backend

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-truckload

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1

  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.tableName}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.tableName}/index/*"

functions:
  # function for adding an order for customer
  add-order:
    handler: api/add-order.main
    description: POST /order
    events:
      - http:
          path: order
          method: post
          cors: true

  # function for adding customer
  add-customer:
    handler: api/add-customer.main
    description: POST /customer
    events:
      - http:
          path: customer
          method: post
          cors: true

  # function for adding vendor
  add-vendor:
    handler: api/add-vendor.main
    description: POST /vendor
    events:
      - http:
          path: vendor
          method: post
          cors: true

  # function for adding trucks
  add-truck:
    handler: api/add-truck.main
    description: POST /truck
    events:
      - http:
          path: truck
          method: post
          cors: true

  # function for adding lease of trucks to an order
  add-lease:
    handler: api/add-lease.main
    description: POST /lease
    events:
      - http:
          path: lease
          method: post
          cors: true

  # function for all
  get-all:
    handler: api/get-all.main
    description: GET /all
    events:
      - http:
          path: all
          method: get
          cors: true

  # function for getting by status
  get-status:
    handler: api/get-status.main
    description: GET /status
    events:
      - http:
          path: status
          method: get
          cors: true

    # function for getting by status
  get-object-info:
    handler: api/get-object-info.main
    description: GET /object
    events:
      - http:
          path: object
          method: get
          cors: true

  # function for all by customers
  get-customer-order:
    handler: api/get-customer-order.main
    description: GET /customer/orders
    events:
      - http:
          path: /customer/orders
          method: get
          cors: true

  # function for updating status
  update-status:
    handler: api/update-status.main
    description: PATCH /status
    events:
      - http:
          path: status
          method: patch
          cors: true

  # function for updating status
  update-order:
    handler: api/update-order.main
    description: PATCH /order
    events:
      - http:
          path: order
          method: patch
          cors: true

  confirm-order:
    handler: api/confirm-order.main
    description: put /c/order
    events:
      - http:
          path: /c/order
          method: patch
          cors: true

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}